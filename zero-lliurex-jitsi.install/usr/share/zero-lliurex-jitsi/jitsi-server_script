#!/bin/bash

#set -x 

ACTION="$1"
shift
PACKAGE_LIST=$@

DNSMASQ_CONFDIR="/var/lib/dnsmasq/hosts"
APACHE_CONFDIR="/etc/apache2/sites-available"
FILES_PATH="/usr/share/zero-lliurex-jitsi"
RUNDIR="/var/lib/jitsi-server"
USE_DOMAIN="jitsi.lliurex"

ENVIRONMENT="${FILES_PATH}/environment"
COMPOSEFILE="${FILES_PATH}/docker-compose.yml"
SERVICEFILE="${FILES_PATH}/jitsi-server.service"
APACHEFILE="${FILES_PATH}/apache-jitsi.conf"

CRONFILE="/etc/cron.hourly/jitsi"

DOCKER="$(which docker)"
COMPOSE="$(which docker-compose)"
IMAGES="jitsi/jvb jitsi/web jitsi/prosody jitsi/jicofo"

date=$(date +%Y%M%d%H%M)

get_ip_interface(){
    # Get physical interfaces
    phys_ifaces=($(sed -r 's/^\s*(eth[^:]+|enp[^:]+|wlan[^:]+):.*$/\1/;t;d ' /proc/net/dev))
    echo "${#phys_ifaces[@]} interfaces found: ${phys_ifaces[@]}"
    ifaces_ip=()
    reg_master='^10[.]3[.]0[.]254$'
    reg_slave='^10[.]3[.][0-9]{1,3}[.]1$'
    reg_independent='^10[.]2[.][0-9]{1,3}[.]254$'
    type_detected="other"
    for i in ${!phys_ifaces[@]}; do
	ifaces_ips[${i}]="$(ip a s ${phys_ifaces[${i}]}|sed -r 's/^\s*+inet\s*([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)\/.*$/\1/;t;d'|xargs)"
	ips=(${ifaces_ips[${i}]})
	echo "Detected ${#ips[@]} ip on ${phys_ifaces[${i}]}: ${ips[@]}"
	for ip in ${ifaces_ips[${i}]}; do
	    if [[ "$ip" =~ $reg_master ]];then
		type_detected="master"
	    else
		if [[ "$ip" =~ $reg_independent ]];then
		    type_detected="independent"
		else
		    if [[ "$ip" =~ $reg_slave ]];then
			type_detected="slave"
		    fi
		fi
	    fi
	done
    done
    echo "type = $type_detected"
    default_route_via=$(ip route get 8.8.8.8 | sed -r 's/.*dev\s+(eth\S+|enp\S+|wlan\S+)\s+.*$/\1/;t;d')
    options=""
    reg_internal='^10[.].*$'
    reg_center='^10[.]3[.]0[.]254$'
    reg_replication='^10[.]3[.][0-9]{1,3}[.]1$'
    reg_class='^10[.]2[.][0-9]{1,3}[.]254$'
    for i in ${!phys_ifaces[@]}; do
	ips=(${ifaces_ips[${i}]})

	gw=""
	if [ "${phys_ifaces[${i}]}" == "$default_route_via" ]; then
	    gw="_(gateway)"
	fi

	if [ ${#ips[@]} -eq 1 ]; then
	    xtra=""
	    if [[ "${ips[0]}" =~ $reg_internal ]];then
		if [[ "${ips[0]}" =~ $reg_center ]];then
		    xtra="_(center)"
		else
		    if [[ "${ips[0]}" =~ $reg_replication ]];then
			xtra="_(replication)"
		    else
			if [[ "${ips[0]}" =~ $reg_class ]];then
			    xtra="_(class)"
			else
			    xtra="_(unknown)"
			fi
		    fi
		fi
	    else
		xtra="_(external)"
	    fi

	    options+="${ips[0]}_${phys_ifaces[${i}]} ${phys_ifaces[${i}]}_${ips[0]}${gw}${xtra} off "
	else
	    if [ ${#ips[@]} -gt 1 ]; then
		for ip in ${ips[@]}; do
		    xtra=""
		    if [[ "${ip}" =~ $reg_internal ]];then
			if [[ "${ip}" =~ $reg_center ]];then
			    xtra="_(center)"
			else
			    if [[ "${ip}" =~ $reg_replication ]];then
				xtra="_(replication)"
			    else
				if [[ "${ip}" =~ $reg_class ]];then
				    xtra="_(class)"
				else
				    xtra="_(unknown)"
				fi
			    fi
			fi
		    else
			xtra="_(external)"
		    fi

		    options+="${ip}_${phys_ifaces[${i}]} ${phys_ifaces[${i}]}_${ip}${gw}${xtra} off "
	        done
	    fi
	fi
    done
    ret=$(kdialog --title "zero-lliurex-jitsi" --radiolist "Select interface:" $options)
    if [ -n "$ret" ];then
	tmp=($(echo $ret|sed -r 's/^([^_]+)_(\S+)$/\1 \2/'))
	IP=${tmp[0]}
	DEV=${tmp[1]}
	TYPE=$type_detected
	echo "IP=$IP DEV=$DEV TYPE=$TYPE"
	return 0
    else
	return 1
    fi
}
check_images(){
    for img in $IMAGES; do
        NAME="$(docker images --format "{{.Repository}}" -freference="$img" 2>/dev/null)"
        if [ -z "$NAME" ];then
            return 1
        fi
    done
    return 0
}
remove_images(){
    for img in $IMAGES; do
        found="$(docker images --format "{{.Repository}}" -freference="$img")"
        if [ "$found" == "$img" ]; then
            docker rmi -f $img >/dev/null 2>/dev/null
            if [ $? -ne 0 ];then
                return 1
            fi
        fi
    done
    return 0
}
remove_containers(){
    for img in $IMAGES; do
        found="$(docker ps -a -fancestor="$img" --format "{{.Names}}")"
        if [ -n "$found" ]; then
            docker rm -f $found >/dev/null 2>/dev/null
            if [ $? -ne 0 ];then
                return 1
            fi
        fi
    done
    return 0
}
case $ACTION in
    getStatus)
        if [[ "${PACKAGE_LIST[*]}" =~ "jitsi" ]]; then
            if ! check_images; then
                echo 1
            else
                if [ -d "$RUNDIR" -a -f "$RUNDIR/.env" -a -f "$RUNDIR/docker-compose.yml" -a -f "$DNSMASQ_CONFDIR/jitsi" -a -f "$APACHE_CONFDIR/jitsi.conf" ];then
                    echo 0
                else
                    echo 1
                fi
            fi
        else
            echo "Not found"
        fi
        echo 0
    ;;
    download)
        # echo "Running ${ACTION} on zero-lliurex-jitsi"
    ;;
    preInstall)
        # echo "Running ${ACTION} on zero-lliurex-jitsi"
    ;;
    installPackage)
        if [ ! -d $RUNDIR ]; then
            mkdir -p $RUNDIR
        else
            mv $RUNDIR /var/tmp/jitsi-server.$date
            mkdir -p $RUNDIR
        fi
        if [ $? -ne 0 ];then
            echo "Unable to create $RUNDIR"
            exit 1
        fi
        echo "Running ${ACTION} on zero-lliurex-jitsi"
        echo "[Setting configuration]"
        if get_ip_interface; then
            echo "Using ip $IP"
            sed -r "s/DOCKER_HOST_ADDRESS[ ]*=[ ]*.*$/DOCKER_HOST_ADDRESS=$IP/g" $ENVIRONMENT > $RUNDIR/.env 
        else
            echo ' **** Error detecting IP configuration **** '
            echo ' **** Please report this problem with this attachment ****'
	    ip a s
            exit 1
        fi
        if [ -f "$RUNDIR/.env" ]; then
            sed -r -i "s/PUBLIC_URL[ ]*=[ ]*.*$/PUBLIC_URL=$USE_DOMAIN/g" $RUNDIR/.env
            sed -r -i "s%CONFIG[ ]*=[ ]*.*%CONFIG=$RUNDIR%g" $RUNDIR/.env

            KEYS="JICOFO_COMPONENT_SECRET JICOFO_AUTH_PASSWORD JVB_AUTH_PASSWORD JIGASI_XMPP_PASSWORD JIBRI_RECORDER_PASSWORD JIBRI_XMPP_PASSWORD"
            for KEY in $KEYS; do
            RAND=$(openssl rand -hex 16)
            sed -r -i "s/$KEY[ ]*=[ ]*.*$/$KEY=$RAND/g" $RUNDIR/.env
            done
            sed -r -i "s/HTTP_PORT[ ]*=[ ]*.*$/HTTP_PORT=81/g" $RUNDIR/.env
            sed -r -i "s/HTTPS_PORT[ ]*=[ ]*.*$/HTTPS_PORT=82/g" $RUNDIR/.env
        fi
        DNSMASQ="$(which dnsmasq)"
        if [ -n "$DNSMASQ" -a -d "$DNSMASQ_CONFDIR" ]; then
            echo "[Setting dns]"
            echo $IP $USE_DOMAIN > $DNSMASQ_CONFDIR/jitsi
            systemctl restart dnsmasq
        fi
#		cp $CRONTABFILE $CRONFILE
#		chmod +x /etc/cron.hourly/jitsi
#		echo "[Setting cron dns]"
#		bash /etc/cron.hourly/jitsi
        echo "[Setting workdir]"
        cp $COMPOSEFILE $RUNDIR/docker-compose.yml
        echo "[Pulling images]"
        $COMPOSE -f $RUNDIR/docker-compose.yml --env-file $RUNDIR/.env pull
        echo "[Setting service]"
        cp $SERVICEFILE /etc/systemd/system
        systemctl daemon-reload
        systemctl enable jitsi-server
        A2MOD="$(which a2enmod)"
        A2SITE="$(which a2ensite)"
        if [ -n "$A2MOD" -a -n "$A2SITE" -a -d "$APACHE_CONFDIR" ]; then
            echo "[Setting http server configuration]"
            cp $APACHEFILE $APACHE_CONFDIR/jitsi.conf
            a2enmod ssl proxy proxy_http headers
            a2ensite jitsi
            systemctl restart apache2
        fi
        echo " * * Finished * * "
    ;;
    remove)
        echo "Running ${ACTION} on zero-lliurex-jitsi"
        echo "[Stopping service]"
        systemctl stop jitsi-server
        if [ -d "$RUNDIR" -a -f "$RUNDIR/.env" -a -f "$RUNDIR/docker-compose.yml" ];then
            echo "[Removing containers]"
            $COMPOSE -f $RUNDIR/docker-compose.yml --env-file $RUNDIR/.env down
        fi
        remove_containers
        remove_images
        if [ -d "$RUNDIR" ];then
            echo "[Backing up workdir to /var/tmp]"
            mv $RUNDIR /var/tmp/jitsi-server.$date
        fi
        if [ -f "$DNSMASQ_CONFDIR/jitsi" ];then
            echo "[Removing dns]"
            rm -f $DNSMASQ_CONFDIR/jitsi
            systemctl restart dnsmasq
        fi
#		if [ -f "$CRONFILE" ]; then
#			echo "[Removing cron dns]"
#			bash $CRONFILE remove
#			rm -f $CRONFILE
#		fi
        if [ -f "/etc/systemd/system/jitsi-server.service" ];then
            echo "[Removing service]"
            rm -f /etc/systemd/system/jitsi-server.service
            systemctl daemon-reload 
        fi
        if [ -f "$APACHE_CONFDIR/jitsi.conf" ];then
            echo "[Removing http server configuration]"
            a2dissite jitsi
            rm -f $APACHE_CONFDIR/jitsi.conf
            systemctl restart apache2
        fi
        echo " * * Finished * * "
    ;;
    postInstall)
        echo "Running ${ACTION} on zero-lliurex-jitsi"
        echo "[Starting first time]"
        systemctl start jitsi-server
        #$COMPOSE -f $RUNDIR/docker-compose.yml --env-file $RUNDIR/.env up -d
    ;;
esac
exit 0

